--------------------------------------------------REDBUS SPECIFICATION--------------------------------------------------

I. Introduction to RedBus
    The RedBus is a communication protocol originally established by Eloraam to allow the networking of various
peripherals in the RedPower Control module. As RedPower is no longer maintained by Eloraam due to changes in
Minecraft's EULA, and all documentation of the original RedBus (including source code) is proprietary or no longer
accessible, this document serves to define a modified version of the original RedBus that will be used as the
communication protocol between devices within the DoesNotCompute mod.

II. Features of the RedBus
    Usage of the RedBus has many advantages over simply placing peripherals next to each other to connect them together,
although the RedBus does provide this functionality if less complex networks are desired. The addition of ribbon
cabling for attaching peripherals that are farther away from other devices and a realistic communication model not only
adds more of a 'full immersion' factor to the computer and peripherals within the mod, but also teaches users about the
technicalities and problems associated with real bus designs and allows stock or third party devices alike to plug into
the bus with minor modification in actual implementation.

III. RedBus Protocol and Overview
    The RedBus and associated devices consists of three major components; the RedBus window, the network itself, and the
data packet. The RedBus window is a 256-byte long page of memory that other devices on the RedBus are enabled to read
from and write to by sending data packets. A given device on the bus can have much more memory than this window, such
as the computer block itself, but other devices on the bus must request access to this memory through manipulation of
the bus window.
    Data packets on the bus are the only information that is actually shared by devices and transmitted through the
network. Because it is quite possible for two devices sharing data with each other to transmit packets at a moderate
speed, packets only contain a byte device address, a byte window index, and a byte value. Although in most cases it is
preferable for all devices/peripherals on the bus to have unique device addresses, two devices can also be given the
same address if data is to be shared between them. If the specified device address does not exist on the bus then the
sent packet will simply be ignored. The other two values within the packet, the window index and the value, specify
where into the bus window that the value will be written and the value to write, respectively.
    The network is the element of the RedBus that actually carries data packets between devices. One important
implementation detail of note is that all devices on the bus will receive all packets sent on the bus, regardless of
what their device address is. Although it is typical for packets with a non-matching address to simply be ignored,
this also means that it is possible to send a packet with a reserved address on the bus to all devices enabled to
receive such a packet. All devices on the bus in an ideal situation should only receive packets once; however, due to
bugs in implementation and other factors such as network design this is not guaranteed in all cases. Additionally, a
single device is not allowed to transmit packets through itself as part of a network unless it is a cable of some
nature or it is part of the device's function (for example, a network proxy). This has a side-effect of requiring that
devices placed next to each other still need to have individual connections to the bus to be able to communicate on it
independently.

IV. Special Addresses and Values
The following addresses and values are interpreted on the RedBus to have special meanings by conforming devices:

Addresses:
- 0xFF (Transmit To All)

Values:
- 0x00 (Command Success)
- 0xFF (Bad Command/Command Failure)

V. Actual RedBus Implementation
    The RedBus is implemented in software through the use of an interface called IRedbusCompatible, which can be hooked
into by other mods if they wish to make their devices RedBus compatible. The interface requires only one function,
onPacketReceived, which is called whenever an adjacent block wishes to transfer a data packet through/into the device.
IRedbusCompatible only needs to be implemented by tile entities and not blocks, however blocks may need to check if an
adjacent tile entity implements the interface in order to give a visual indication that it has connected it to the
network. Loops are prevented from occurring on the bus by storing a list of BlockPos references in a Set as a part of
the packet; any devices that will act as cables and transfer packets through themselves must examine the Set to make
sure that an adjacent block has not already received the packet. This is made easier through the use of the addCable
method in the RedbusDataPacket class, which will return false if the given BlockPos already exists in the Set.
